<?xml version="1.0"?>
<robot name="pmf" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- CONSTANTS -->
  <xacro:property name="PI" value="3.1415926535897931" />
  
  <!-- LINKED PARAMS -->
  <xacro:property name="package_name" value="$(arg robot_name)_description" />

  <xacro:property name="robot_yaml" value="$(find ${package_name})/config/robot.yaml" />
  <xacro:property name="robot_params" value="${xacro.load_yaml(robot_yaml)}" />

  <xacro:property name="simulation_yaml" value="$(find ${package_name})/config/simulation.yaml" />
  <xacro:property name="sim_params" value="${xacro.load_yaml(simulation_yaml)}" />

  <xacro:property name="body_mass" value="${robot_params['body']['mass']}" />
  <xacro:property name="body_width" value="${robot_params['body']['width']}" />
  <xacro:property name="body_length" value="${robot_params['body']['length']}" />
  <xacro:property name="body_height" value="${robot_params['body']['height']}" />
  <xacro:property name="wheel_mass" value="${robot_params['wheel']['mass']}" />
  <xacro:property name="wheel_radius" value="${robot_params['wheel']['radius']}" />
  <xacro:property name="wheel_thickness" value="${robot_params['wheel']['thickness']}" />
  <xacro:property name="wheelbase" value="${body_width + 0.2}" />  

  <gazebo>
    <plugin name="hector_gazebo_imu" filename="libhector_gazebo_ros_imu.so">
      <bodyName>chassis_link</bodyName>
      <topicName>imu</topicName>
      <gaussianNoise>0.0</gaussianNoise>
      <xyzOffset>0 0 0</xyzOffset>
      <rpyOffset>0 0 0</rpyOffset>
    </plugin>
    <plugin name="pmf_interface" filename="libpmf_simulation_plugin.so">
      <pubGroundTruth>${sim_params['pub_ground_truth']}</pubGroundTruth>
      <autoResetOrientation>${sim_params['auto_reset_orientation']}</autoResetOrientation>
      <autoResetDelay>${sim_params['auto_reset_delay']}</autoResetDelay>
      <bodyHeight>${body_height}</bodyHeight>
      <controlMode>${sim_params['control_mode']}</controlMode>
    </plugin>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <robotNamespace>$(arg robot_name)</robotNamespace>
      <jointName>
          left_wheel_joint, right_wheel_joint
      </jointName>
      <updateRate>${robot_params['joint_state']['rate']}</updateRate>
      <alwaysOn>true</alwaysOn>
    </plugin>
  </gazebo> 

  <xacro:macro name="wheel" params="name y_offset z_offset *link_pose">
    <link name="${name}_link">
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="${wheel_mass}"/>
        <!-- Not accurate calculation, it is assumed -->
        <inertia ixx="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" ixy="0" ixz="0" iyy="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" iyz="0" izz="${wheel_mass/2 * wheel_radius*wheel_radius}"/>
      </inertial>
      <visual>
        <xacro:insert_block name="link_pose" />
        <geometry>
          <mesh filename="package://${package_name}/meshes/pmf_wheel.STL"/>
        </geometry>
        <material name="black" />
      </visual>
      <collision name="${name}_collision">
        <origin xyz="0 0 ${z_offset}" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
      </collision>
    </link>
    <gazebo reference="${name}_link">
        <material>Gazebo/DarkGrey</material>
        <selfCollide>false</selfCollide>
        <mu1 value="0.5"/>
        <mu2 value="0.5"/>
        <fdir1 value="1 0 0"/>
    </gazebo>
    <joint name="${name}_joint" type="continuous">
      <origin xyz="0 ${y_offset} 0" rpy="-${PI/2} 0 0"/>
      <parent link="base_link"/>
      <child link="${name}_link"/>
      <axis xyz="0 0 1" />
    </joint>
  </xacro:macro>

  <xacro:wheel name="left_wheel" y_offset="${wheelbase/2}" z_offset="-0.03">
    <origin xyz="0 0.06 -0.37" rpy="0 ${PI} 0"/>
  </xacro:wheel>
  <xacro:wheel name="right_wheel" y_offset="${-wheelbase/2}" z_offset="0.03">
    <origin xyz="0 0.06 0.37" rpy="0 0 0"/>
  </xacro:wheel>

  <link name="chassis_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="${body_mass}"/>
      <inertia ixx="${body_mass/12 * (body_width*body_width + body_height*body_height)}" ixy="0" ixz="0" iyy="${body_mass/12 * (body_height*body_height + body_length*body_length)}" iyz="0" izz="${body_mass/12 * (body_width*body_width + body_length*body_length)}"/>
    </inertial>
    <visual>
      <origin xyz="0 0 -${body_height/2 - 0.051225}" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://${package_name}/meshes/pmf_base.STL"/>
      </geometry>
      <material name="orange"/>
    </visual>
    <collision name="chassis_collision">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${body_length} ${body_width} ${body_height}"/>
      </geometry>
    </collision>
  </link>
  
  <gazebo reference="chassis_link" >
    <material>Gazebo/Orange</material>
    <mu1>0.5</mu1>
    <mu2>0.5</mu2>
  </gazebo>

  <link name="base_link">
    <xacro:if value="${robot_params['wheel']['training']}">
      <collision name="training_wheel_1">
        <origin xyz="1 0 ${0.025-wheel_radius}" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.024"/>
        </geometry>
      </collision>
      <collision name="training_wheel_2">
        <origin xyz="-1 0 ${0.025-wheel_radius}" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.024"/>
        </geometry>
      </collision>
    </xacro:if>
  </link>

  <joint name="chassis_joint" type="fixed">
    <origin xyz="0 0 ${body_height/2}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="chassis_link"/>
  </joint>

  <material name="orange">
    <color rgba="0.64 0.313939 0.095351 1.0"/>
  </material>

  <material name="black">
    <color rgba="0.15 0.15 0.15 1.0" />
  </material>

</robot>
